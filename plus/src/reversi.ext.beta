EXTENTION reversi-1.0-1
# $Id: reversi.ext.beta,v 1.1 2001-07-25 15:32:14 uri Exp $

namespace eval reversi {
    variable colors
    set colors(board) white
    set colors(p0) white
    set colors(p1) black
    set colors(highbad) red
    set colors(highboard) yellow

    proc init {} {
	onevent servercmd RVRSI [namespace current]::server_cmd_ckrs
	onevent usercmd REVERSI [namespace current]::ucmd_reversi
	onevent serverin ERROR [namespace current]::server_error
	iface_init
	canvas_init
	register_msgs {
	    xcplus_checkers_inprogress {*** A checkers game is already in progress.}
	    xcplus_checkers_offering {*** Offering %n a checkers game.}
	    xcplus_checkers_offer {*** %n is offering you a checkers game. type /CHECKERS %n to accept.}
	    xcplus_checkers_progoffer {*** %n is offering you a checkers game. You can't play because a game is already in progress.}
	    xcplus_checkers_refusing {*** Refusing the game request from %n.}
	    xcplus_checkers_norefuse {*** %n didn't offer you any checkers game, therefore you can't refuse.}
	    xcplus_checkers_refuse {*** checkers: %n is refusing your game request: %t.}
	    xcplus_checkers_turncheat {*** checkers: %n tried to move NOT on his turn.}
	    xcplus_checkers_start {*** checkers: Starting game with %n.}
	    xcplus_checkers_badmove {*** checkers: Invalid move from %n.}
	    xcplus_checkers_cheatmove {*** checkers: Illegal move from %n.}
	    xcplus_checkers_youwon {*** checker: You won the game !}
	    xcplus_checkers_youlost {*** checker: You lost the game :-(}
	    xcplus_checkers_win {*** checker: The %t player won the game.}
	    xcplus_checkers_disc {*** Checkers: remote side disconnected.}
	}
    }
    
    proc destroy {} {
	unevent servercmd [namespace current]::ucmd_reversi
	unevent usersmc [namespace current]::server_cmd_ckrs
	unevent serverin [namespace current]::server_error
	destroy_widget .reversi
	namespace delete [namespace current]
    }

    proc iface_init {} {
	toplevel .reversi
	wm title .reversi "XCReversi"
	wm protocol .reversi WM_DELETE_WINDOW [namespace current]::window_close
	wm withdraw .reversi
    }
        
    proc canvas_init {} {
	canvas .reversi.canvas -relief raised -border 2 -height [expr 32 * 8] -width [expr 32 * 8] -background gray
	grid configure .reversi.canvas -row 1 -column 1
	draw_board 32 32
    }

    proc get_square_coords {h v} {
	variable board
	return [list	\
	    [expr $board(hoffs) + $h * $board(hsize)]	\
	    [expr $board(voffs) + $v * $board(vsize)]	\
	    [expr $board(hoffs) + $h * $board(hsize) + $board(hsize) - 1]\
	    [expr $board(voffs) + $v * $board(vsize) + $board(vsize) - 1]]
    }
    
    proc get_square_by_coords {x y} {
	variable board
	return [list \
	    [expr ($x - $board(hoffs)) / $board(hsize)] \
	    [expr ($y - $board(voffs)) / $board(vsize)]]
    }
    
    proc get_unit_coords {h v} {
	set coords [get_square_coords $h $v]
	return [list \
	    [expr [lindex $coords 0] + 2] \
	    [expr [lindex $coords 1] + 2] \
	    [expr [lindex $coords 2] - 2] \
	    [expr [lindex $coords 3] - 2]]
    }
    
    proc format_coords {coords} {
	set letters "ABCDEFGH"
	return [string index $letters [lindex $coords 0]][expr [lindex $coords 1] + 1]
    }

    proc draw_board {{hsize 0} {vsize 0} {hoffs 0} {voffs 0}} {
	variable board
	variable colors
	if !$hsize {
	    set hsize [expr [.drawing_canvas.canvas cget -height] / 8]
	    set hoffs [expr [.drawing_canvas.canvas cget -height] % 8 / 2]
	}
	if !$vsize {
	    set vsize [expr [.drawing_canvas.canvas cget -width] / 8]
	    set voffs [expr [.drawing_canvas.canvas cget -width] % 8 / 2]
	}
	incr hoffs 2
	incr voffs 2
	set board(hsize) $hsize
	set board(vsize) $vsize
	set board(hoffs) $hoffs
	set board(voffs) $voffs
	for {set h 0} {$h < 8} {incr h} {
	    for {set v 0} {$v < 8} {incr v} {
		.reversi.canvas delete square$h$v
		set item [eval .reversi.canvas create rectangle [get_square_coords $h $v] {-fill $colors(board)}]
		.reversi.canvas addtag square$h$v withtag $item
		.reversi.canvas lower $item
	    }
	}
    }
    
    proc init_game {} {
	variable board
	variable colors
	variable game
	wm deiconify .reversi
	set game(p0) 4
	set game(p1) 4
	set game(pactive) 0
	foreach h {3 4 4 3} v {3 4 3 4} player {1 1 0 0} {
            set unit [draw_unit $h $v $colors(p[expr $player])]
	    set board(sq$h$v) $unit
	    set board(u$unit) $player
	    .reversi.canvas addtag units withtag $unit
	}
	start_turn $game(pactive)
    }
    
    proc finish_game {} {
	variable board
	variable game
	.reversi.canvas delete units
	foreach i [concat [array names board sq*] [array names board u*]] {
	    unset board($i)
	}
	foreach i [concat [array names game p*] network isblack] {
	    unset game($i)
	}
	wm withdraw .reversi
    }
    
    proc game_win {player} {
	variable game
	if $game(network) {
	    if $player {
		putcmsg xcplus_checkers_youlost p $game(peer)
		tk_dialog .reversi.dialog "You lost !" "You lost the game :-(" info 0 "Bummer !"
	    } else {
		putcmsg xcplus_checkers_youwon p $game(peer)
		tk_dialog .reversi.dialog "You won !" "You won the game !" info 0 "Yey !"
	    }
	} else {
	    set name [expr {$player ? "black" : "white"}]
	    putcmsg xcplus_checkers_win t $name
	    if [tk_dialog .reversi.dialog "The $name won !" "The $name player won the game !" info 1 "Dismiss" "Another Game !"] {
		set new_game 1
	    }
	}
	finish_game
	if [info exists new_game] {
	    set game(network) 0
	    set game(isblack) 0
	    init_game
	}
    }
    
    proc is_unit {coords} {
	variable board
	return [info exists board(sq[join $coords ""])]
    }

    proc get_unit {h v} {
	variable board
	if [info exists board(sq$h$v)] {
	    return $board(u$board(sq$h$v))
	} else {
	    return ""
	}
    }
    
    proc set_unit_player {h v player} {
	variable board
	variable game
	variable colors
	set unit $board(sq$h$v)
	set board(u$unit) $player
	incr game(p$player)
	incr game(p[expr !$player]) -1
	.reversi.canvas itemconfigure $unit -fill $colors(p$player)
    }
    
    proc draw_unit {h v color} {
	return [eval .reversi.canvas create oval [get_unit_coords $h $v] {-fill $color}]
    }

    proc locate_unit {unit coords} {
	return [eval .reversi.canvas coords $unit [eval get_unit_coords $coords]]
    }
    
    proc locate_unit_center {unit centerx centery} {
	variable board
	if {$centerx < 0} {
	    set centerx 0
	} elseif {$centerx > [.reversi.canvas cget -width]} {
	    set centerx [.reversi.canvas cget -width]
	}
	if {$centery < 0} {
	    set centery 0
	} elseif {$centery > [.reversi.canvas cget -height]} {
	    set centery [.reversi.canvas cget -height]
	}
	set x [expr $centerx - $board(hsize) / 2 + 2]
	set y [expr $centery - $board(vsize) / 2 + 2]
	.reversi.canvas coords $unit $x $y [expr $x + $board(hsize) - 4] [expr $y + $board(vsize) - 4]
    }
    
    proc modify_unit {h v player} {
	foreach {i j} [list [expr $h + 1] $v [expr $h - 1] $v	\
			    $h [expr $v + 1] $h [expr $v - 1]] {
	    if {[get_unit $i $j] == !$player} {
		set_unit_player $i $j $player
		modify_unit $i $j $player
	    }
	}
    }
    
    proc place_unit {target {unit {}}} {
	variable board
	variable game
	variable colors
	if [is_unit $target] {
	    return 0
	}
	set player $game(pactive)
	if {$unit == ""} {
	    set unit [eval draw_unit $target $player $colors(p[expr $player])]
	} else {
	    locate_unit $unit $target
	}
	set board(sq[join $target ""]) $unit
	set board(u$unit) $player
	incr game(p$player)
	eval modify_unit $target $player
	if {$game(p0) + $game(p1) == 64} {
	    game_win
	}
	set game(pactive) [expr !$player]
	return 1
    }
    
    proc canvas_motion {x y} {
	variable current_unit
	variable colors
	variable game
	locate_unit_center $current_unit $x $y
	set coords [get_square_by_coords $x $y]
	if [info exists game(last_square)] {
	    if {$game(last_square) == $coords} {
		return
	    }
	    .reversi.canvas itemconfigure square[join $game(last_square) ""] -fill $colors(board)
	}
	foreach i $coords {
	    if {$i < 0 || $i > 7} {
		return
	    }
	}
	if [is_unit $coords] {
	    .reversi.canvas itemconfigure square[join $coords ""] -fill $colors(highbad)
	} else {
	    .reversi.canvas itemconfigure square[join $coords ""] -fill $colors(highboard)
	}
	set game(last_square) $coords
    }
    
    proc canvas_bpress {x y} {
	variable game
	variable colors
	variable current_unit
	set coords [get_square_by_coords $x $y]
	if [place_unit $coords $current_unit] {
	    if [info exists game(last_square)] {
		.reversi.canvas itemconfigure square[join $game(last_square) ""] -fill $colors(board)
		unset game(last_square)
	    }
	    bind .reversi.canvas <Motion> ""
	    bind .reversi.canvas <Button-1> ""
	    start_turn $game(pactive)
	} else {
	    bell
	}
    }
    
    proc start_turn {player} {
	variable colors
	variable current_unit
	set current_unit [eval draw_unit 0 0 $colors(p[expr $player])]
	set x [expr [winfo pointerx .reversi.canvas] - [winfo rootx .reversi.canvas]]
	set y [expr [winfo pointery .reversi.canvas] - [winfo rooty .reversi.canvas]]
	locate_unit_center $current_unit $x $y
	bind .reversi.canvas <Motion> "[namespace current]::canvas_motion %x %y"
	bind .reversi.canvas <Button-1> "[namespace current]::canvas_bpress %x %y"
    } 
    
    proc process_peer_move {source target ismulti} {
	variable board
	set h [expr 7 - [lindex $source 0]]
	set v [expr 7 - [lindex $source 1]]
	set source [list $h $v]
	set target [list [expr 7 - [lindex $target 0]] [expr 7 - [lindex $target 1]]]
	if ![info exists board(sq$h$v)] {
	    return 0
	}
	set unit $board(sq$h$v)
	if [move_unit $unit $source $target 1 $ismulti] {
	    eval .reversi.canvas coords $unit [eval get_unit_coords $target]
	    return 1
	}
	return 0
    }

    proc window_close {} {
	variable game
	if [info exists game(peer)] {
	    putsock "CMD $game(peer) CKRS CANCEL"
	}
	finish_game
    }

    proc server_error {sargs} {
	variable game
	set errornum [strtok sargs]
	if {$errornum == 104} {
	    set nick [string tolower [strtok sargs]]
	    if [info exists game(network)] {
		if {$nick == $game(peer)} {
		    putcmsg xcplus_checkers_disc p $game(peer)
		    tk_dialog .reversi.dialog "Remote side disconnected." "The remote side disconnected." error 0 "Bummer !"
		    finish_game
		}
	    }
	    foreach i [array names game *,$nick] {
		unset game($i)
	    }
	}
	return 0
    }

    proc ucmd_reversi {uargs} {
	variable game
	set peer [strtok uargs]
	set lpeer [string tolower $peer]
	if {[string toupper $peer] == "REFUSE"} {
	    set peer [strtok uargs]
	    set reason [strrest uargs]
	    if {$peer == ""} {
		return 1
	    }
	    if [info exists game(offers,$lpeer)] {
		unset game(offers,$lpeer)
		putcmsg xcplus_checkers_refusing n $peer t $reason
		putsock "CMD $peer CKFS refuse $reason"
	    } else {
		putcmsg xcplus_checkers_norefuse n $peer
	    }
	    return 1
	}
	if {[string toupper $peer] == "PLAY"} {
	    set peer [strtok uargs]
	}
	if [info exists game(network)] {
	    putcmsg xcplus_checkers_inprogress
	    return 1
	}
	if {$peer == ""} {
	    set game(network) 0
	    set game(isblack) 0
	    init_game
	    return 1
	}
	if [info exists game(offers,$lpeer)] {
	    unset game(offers,$lpeer)
	    set game(network) 1
	    set game(isblack) 1
	    set game(peer) $lpeer
	    putcmsg xcplus_checkers_start n $peer
	    init_game
	    putsock "CMD $peer CKRS START"
	    return 1
	}
        set game(offerto,$lpeer) 1
        putsock "CMD $peer CKRS PLAY"
	putcmsg xcplus_checkers_offering n $peer
	return 1
    }
    
    proc server_cmd_ckrs {source cargs} {
	variable game
	set cargs [split $cargs]
	set cmd [strtok cargs]
	set lsource [string tolower $source]
	set multi 0
	if {[string toupper $cmd] == "MULTI"} {
	    set multi 1
	    set cmd [strtok cargs]
	}
	switch -exact -- [string toupper $cmd] {
	    PLAY {
		set game(offers,$lsource) 1
		putcmsg xcplus_checkers_offer n $source
	    }
	    START {
		if [info exists game(network)] {
		    putsock "CMD $source REFUSE Game already in progress."
		}
		if [info exists game(offerto,$lsource)] {
		    unset game(offerto,$lsource)
		    set game(isblack) 0
		    set game(network) 1
		    set game(peer) $lsource
		    putcmsg xcplus_checkers_start n $source
		    init_game
		} else {
		    putsock "CMD $source REFUSE I didn't offer you any game."
		}
	    }
	    CANCEL {
	        if [info exists game(network)] {
		    if {$lsource == $game(peer)} {
			putcmsg xcplus_checkers_disc p $game(peer)
			tk_dialog .reversi.dialog "Remote side disconnected." "The other player left the game." error 0 "Bummer !"
			finish_game
		    }
		}
	    }
	    REFUSE {
		set reason [strrest $cargs]
		putcmsg xcplus_checkers_refuse n $source t $reason
	    }
	    MOVE {
		if ![info exists game(peer)] {
		    return 1
		}
		if {$game(peer) != $lsource} {
		    return 1
		}
		if !$game(pactive) {
		    putcmsg xcplus_checkers_turncheat n $source
		    return 1
		}
		set letters "ABCDEFGH"
		set src [strtok cargs]
		set target [strtok cargs]
		if {[string length $src] != 2 || [string length $target] != 2} {
		    putcmsg xcplus_checkers_badmove n $source
		    return 1
		}
		set num 0
		foreach {i j} [split $src$target ""] {
		    set i [string toupper $i]
		    if {![string match {[ABCDEFGH]} $i] || ![string match {[12345678]} $j]} {
			putcmsg xcplus_checkers_badmove n $source
			return 1
		    }
		    set coords($num) [list [expr [string first $i $letters]] [expr $j - 1]]
		    incr num
		}
		if ![process_peer_move $coords(0) $coords(1) $multi] {
		    putcmsg xcplus_checkers_cheatmove n $source
		}
	    }
	}
	return 1
    }
    
}
