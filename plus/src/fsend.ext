EXTENTION fsend-1.0-1

namespace eval fsend {
    variable dcc

    proc init {} {
	onevent usercmd FSEND [namespace current]::ucmd_fsend \
			FGET [namespace current]::ucmd_fget
	onevent servercmd FSEND [namespace current]::scmd_fsend
	register_msgs {
	    xcplus_fsend_error_nonick "*** Error: no nick name specified."
	    xcplus_fsend_error_nofile "*** Error: no file name specified."
	    xcplus_fsend_error_openfile "*** Error: couldn't open %f."
	    xcplus_fsend_error_init "*** Error: Failed initilaizing file transfer."
	    xcplus_fsend_error_magickey "*** Error: Incoming magickey from %s is WORNG."
	    xcplus_fsend_established "*** File transfer with %n of file %f established."
	    xcplus_fsend_completed "*** File transfer with %n of file %f completed."
	    xcplus_fsend_incoming "*** Incoming file transfer %f from %n. Write '/fget %x' to receive it."
	    xcplus_fsend_bigger "*** Warning: incoming file is larger than %n said. closing connection."
	    xcplus_fsend_inform "*** Sending file %f to %n."
	}
    }
    
    proc destroy {} {
	unevent usercmd [list [namespace current]::ucmd_fsend \
				[namespace current]::ucmd_fget]
	unevent servercmd [namespace current]::scmd_fsend
	namespace delete [namespace current]
    }
    
    proc strip_file {file} {
	set first [string last {/} $file]
	if {$first != -1} {
	    set file [string range $file [expr $first + 1] end]
	}
	return $file
    }
    
    proc scmd_fsend {nick uargs} {
	variable dcc
	set uargs [split $uargs " "]
	set file [strip_file [lindex $uargs 0]]
	set num [allocate_dcc GET $nick $file]
	putcmsg xcplus_fsend_incoming n $nick f $file x $num
	set dcc(dcc,$num,filesize) [lindex $uargs 1]
	set dcc(dcc,$num,nowsize) 0
	set dcc(dcc,$num,ip) [lindex $uargs 2]
	set dcc(dcc,$num,port) [lindex $uargs 3]
	set dcc(dcc,$num,magickey) [lindex $uargs 4]
    }
    
    proc ucmd_fsend {uargs} {
	set nick [strtok uargs]
	set file [strtok uargs]
	if {$nick == ""} {
	    putcmsg xcplus_fsend_error_nonick 
	    return 1
	}
	if {$file == ""} {
	    set file [tk_getOpenFile]
	    if {$file == ""} {
		putcmsg xcplus_fsend_error_nofile
		return 1
	    }
	} 
	if {![file isfile $file]} {
	    putcmsg xcplus_fsend_error_openfile f $file
	    return 1
	}
	dcc_send $nick $file
	return 1
    }
    
    proc ucmd_fget {uargs} {
	variable dcc
	set arg [strtok uargs]
	if [catch {expr $arg + 1}] {
	    set num [dcc_search $arg]
	} else {
	    set num $arg
	}
	if {[array names dcc dcc,$num,type] == ""} {
	    return 1
	}
	set file [tk_getSaveFile -initialfile $dcc(dcc,$num,file) -initialdir .]
	if {$file == ""} {
	    putcmsg xcplus_fsend_error_nofile
	    return 1
	}
	if ![dcc_get $num $file] {
	    free_dcc $num
	}
	return 1
    }
    
    proc dcc_search {nick} {
	variable dcc
	foreach var [array names dcc {dcc,*,nick}] {
	    if {$nick == $dcc($var)} {
		return [lindex [split $var ,] 1]
	    }
	}
	return -1
    }
    
    proc dcc_send {nick file} {
	variable dcc
	if [catch {open $file r} fd] {
	    putcmsg xcplus_fsend_error_init
	    return
	}
	set num [allocate_dcc SEND $nick [strip_file $file] $fd]
	set dcc(dcc,$num,realfile) $file
	if {![dcc_listen $num]} {
	    free_dcc $num
	    putchat xcplus_fsend_error_init
	    return
	}
	dcc_informuser $num [file size $file]
    }
    
    proc dcc_get {num file} {
	variable dcc
	if {$file == ""} {
	    set file $dcc(dcc,$num,file)
	}
	if [catch {open $file w} dcc(dcc,$num,fd)] {
	    unset dcc(dcc,$num,fd)
	    putcmsg xcplus_fsend_error_init
	    free_dcc $num
	    return 0
	} 
	putchat connecting
	if [catch {socket $dcc(dcc,$num,ip) $dcc(dcc,$num,port)} dcc(dcc,$num,myfd)] {
	    unset dcc(dcc,$num,myfd)
	    putcmsg xcplus_fsend_error_init
	    free_dcc $num
	    return 0
	}
	fconfigure $dcc(dcc,$num,myfd) -blocking 0 -translation auto -buffering line
	puts $dcc(dcc,$num,myfd) $dcc(dcc,$num,magickey)
	flush $dcc(dcc,$num,myfd)
	fconfigure $dcc(dcc,$num,myfd) -blocking 0 -translation binary -buffering none
	putcmsg xcplus_fsend_established n $dcc(dcc,$num,nick) f $dcc(dcc,$num,file)
	fcopy $dcc(dcc,$num,myfd) $dcc(dcc,$num,fd) -command [list [namespace current]::dcc_client_in $num $dcc(dcc,$num,myfd)] -size 1024
	return 1
    }
    
    proc free_dcc {num} {
	variable dcc
	foreach var [array names dcc "dcc,$num,*fd"] {
	    if {$dcc($var) >= 0} { close $dcc($var) }
	}
	foreach var [array names dcc dcc,$num,*] {unset dcc($var)}
    }
    
    proc allocate_dcc {type nick file {fd -1}} {
	variable dcc
	set x 1
	foreach var [array names dcc {dcc,*,type}] {incr x}
	set dcc(dcc,$x,type) $type
	set dcc(dcc,$x,nick) $nick
	set dcc(dcc,$x,file) $file
	if {$fd != -1} { set dcc(dcc,$x,fd) $fd }
	return $x
    }
    
    proc dcc_listen {num} {
	variable dcc
	set dcc(dcc,$num,magickey) "xc[clock clicks][clock seconds][clock clicks][expr rand()]"
	if [catch {socket -server "[namespace current]::dcc_newconn $num" 0} dcc(dcc,$num,listenfd)] {
	    unset dcc(dcc,$num,listenfd)
	    return 0
	}
	set dcc(dcc,$num,port) [lindex [fconfigure $dcc(dcc,$num,listenfd) -sockname] 2]
	return 1
    }
    
    proc dcc_informuser {num size} {
	variable dcc
	global sock
	set ip [lindex [fconfigure $sock -sockname] 0]
	putcmsg xcplus_fsend_inform f $dcc(dcc,$num,file) n $dcc(dcc,$num,nick)
	putsock "CMD $dcc(dcc,$num,nick) FSEND $dcc(dcc,$num,file) $size $ip $dcc(dcc,$num,port) $dcc(dcc,$num,magickey)"
    }
    
    proc dcc_newconn {num idx host port} {
	variable dcc
	if {[array names dcc dcc,$num,type] == ""} {
	    close $idx
	    return
	}
	close $dcc(dcc,$num,listenfd)
	unset dcc(dcc,$num,listenfd)
	set dcc(dcc,$num,clientfd) $idx
	fconfigure $idx -blocking 0 -translation auto -buffering line
	fileevent $idx readable "[namespace current]::dcc_server_in $num $idx"
	putcmsg xcplus_fsend_established n $dcc(dcc,$num,nick) f $dcc(dcc,$num,file)
    }
    
    proc dcc_server_in {num idx} {
	variable dcc
	if {[array names dcc dcc,$num,type] == ""} {
	    close $idx
	    return
	}
    	if [catch {set buf [gets $idx]}] {return}
	if {$buf == ""} {return}
	if {$buf != $dcc(dcc,$num,magickey)} {
	    putcmsg xcplus_fsend_error_magickey s [lindex [fconfigure $idx -peername] 0]
	    free_dcc $num
	    return
	}
	fconfigure $idx -blocking 0 -translation binary -buffering none
	fileevent $idx readable ""
	fcopy $dcc(dcc,$num,fd) $idx -command [list [namespace current]::dcc_server_out $num $idx] -size 1024
    }
    
    proc dcc_server_out {num idx bytes {error {}}} {
	variable dcc
	flush $idx
	if {[string length $error] != 0 || [eof $dcc(dcc,$num,fd)]} {
	    putcmsg xcplus_fsend_completed f $dcc(dcc,$num,file) n $dcc(dcc,$num,nick)
	    free_dcc $num
	    return 1
	} else {
	    fcopy $dcc(dcc,$num,fd) $idx -command [list [namespace current]::dcc_server_out $num $idx] -size 1024
	}
    }
    
    proc dcc_client_in {num idx bytes {error {}}} {
	variable dcc
	flush $dcc(dcc,$num,fd)
	incr dcc(dcc,$num,nowsize) $bytes
	if {[string length $error] != 0 || [eof $idx] || $dcc(dcc,$num,nowsize) == $dcc(dcc,$num,filesize)} {
	    putcmsg xcplus_fsend_completed f $dcc(dcc,$num,file) n $dcc(dcc,$num,nick)
	    free_dcc $num
	} elseif {$dcc(dcc,$num,nowsize) > $dcc(dcc,$num,filesize)} {
	    putcmsg xcplus_fsend_bigger n $dcc(dcc,$num,nick)
	    free_dcc $num
	} else {
	    fcopy $idx $dcc(dcc,$num,fd) -command [list [namespace current]::dcc_client_in $num $idx] -size 1024
	}
    }
}
